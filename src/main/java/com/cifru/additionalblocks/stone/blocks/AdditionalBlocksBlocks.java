package com.cifru.additionalblocks.stone.blocks;

import com.cifru.additionalblocks.stone.AdditionalBlocksConfig;
import com.cifru.additionalblocks.stone.blocks.custom.*;
import com.cifru.additionalblocks.stone.entities.NuclearTntEntity;
import com.cifru.additionalblocks.stone.generators.ABBlockStateGenerator;
import com.cifru.additionalblocks.stone.generators.ABLootTableGenerator;
import com.cifru.additionalblocks.stone.generators.ABModelGenerator;
import com.cifru.additionalblocks.stone.generators.ABRecipeGenerator;
import com.cifru.additionalblocks.stone.items.AdditionalBlocksItems;
import com.cifru.additionalblocks.stone.tools.ToolTier;
import com.cifru.additionalblocks.stone.tools.ToolType;
import com.supermartijn642.core.block.BaseBlock;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.material.Material;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.function.Consumer;

/**
 * Created 10/03/2023 by SuperMartijn642
 */
public class AdditionalBlocksBlocks {

    public static final List<BlockType<?>> ALL_BLOCKS;
    private static final Consumer<BlockType<?>> COLLECTOR;

    static{
        List<BlockType<?>> blocks = new ArrayList<>();
        ALL_BLOCKS = Collections.unmodifiableList(blocks);
        COLLECTOR = blocks::add;
    }

    // ---- COMMON CONFIGURATORS ----
    private static final BlockBuilder.Configurator SLAB_PROPERTIES = builder -> builder.blockStatePreset(ABBlockStateGenerator.SLAB).modelPreset(ABModelGenerator.SLAB);
    private static final BlockBuilder.Configurator STAIR_PROPERTIES = builder -> builder.blockStatePreset(ABBlockStateGenerator.STAIRS).modelPreset(ABModelGenerator.STAIRS);
    private static final BlockBuilder.Configurator WALL_PROPERTIES = builder -> builder.blockTag("minecraft", "walls").blockStatePreset(ABBlockStateGenerator.WALL).modelPreset(ABModelGenerator.WALL);
    private static final BlockBuilder.Configurator PILLAR_PROPERTIES = builder -> builder.blockStatePreset(ABBlockStateGenerator.PILLAR).modelPreset(ABModelGenerator.PILLAR);
    private static final BlockBuilder.Configurator HORIZONTAL_ROTATION_PROPERTIES = builder -> builder.blockStatePreset(ABBlockStateGenerator.HORIZONTAL_ROTATION);

    // ---- BLOCKS ----
    // Marble
    private static final BlockBuilder.Configurator MARBLE_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableMarble).mapColor(DyeColor.WHITE).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(0.8f).explosionResistance(0.8f).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> MARBLE = BlockBuilder.create("marble").translation("Marble Block").configure(MARBLE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_SLAB = BlockBuilder.create("marble_slab").translation("Marble Slab").configure(MARBLE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("marble")).recipePreset(ABRecipeGenerator.SLAB.from(() -> MARBLE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_STAIRS = BlockBuilder.create("marble_stairs").translation("Marble Stairs").configure(MARBLE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("marble")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> MARBLE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_WALL = BlockBuilder.create("marble_wall").translation("Marble Wall").configure(MARBLE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("marble")).recipePreset(ABRecipeGenerator.WALL.from(() -> MARBLE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_MARBLE = BlockBuilder.create("smooth_marble").translation("Smooth Marble Block").configure(MARBLE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_MARBLE_SLAB = BlockBuilder.create("smooth_marble_slab").translation("Smooth Marble Slab").configure(MARBLE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("smooth_marble")).recipePreset(ABRecipeGenerator.SLAB.from(() -> SMOOTH_MARBLE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_MARBLE_STAIRS = BlockBuilder.create("smooth_marble_stairs").translation("Smooth Marble Stairs").configure(MARBLE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("smooth_marble")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> SMOOTH_MARBLE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_MARBLE_WALL = BlockBuilder.create("smooth_marble_wall").translation("Smooth Marble Wall").configure(MARBLE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("smooth_marble")).recipePreset(ABRecipeGenerator.WALL.from(() -> SMOOTH_MARBLE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_BRICKS = BlockBuilder.create("marble_bricks").translation("Marble Bricks").configure(MARBLE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_BRICKS_SLAB = BlockBuilder.create("marble_bricks_slab").translation("Marble Bricks Slab").configure(MARBLE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("marble_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> MARBLE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_BRICKS_STAIRS = BlockBuilder.create("marble_bricks_stairs").translation("Marble Brick Stairs").configure(MARBLE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("marble_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> MARBLE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_BRICKS_WALL = BlockBuilder.create("marble_bricks_wall").translation("Marble Brick Wall").configure(MARBLE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("marble_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> MARBLE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> MARBLE_PILLAR = BlockBuilder.create("marble_pillar").translation("Marble Pillar").configure(MARBLE_PROPERTIES).configure(PILLAR_PROPERTIES).buildCustom(ABPillarBlock::new, COLLECTOR);
    // Stone brick block
    private static final BlockBuilder.Configurator STONE_BRICK_BLOCK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableStoneBrickBlock).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(1.5f).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> STONE_BRICK_BLOCK = BlockBuilder.create("stone_brick_block").translation("Stone Brick Block").configure(STONE_BRICK_BLOCK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> STONE_BRICK_BLOCK_SLAB = BlockBuilder.create("stone_brick_block_slab").translation("Stone Brick Block Slab").configure(STONE_BRICK_BLOCK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("stone_brick_block")).recipePreset(ABRecipeGenerator.SLAB.from(() -> STONE_BRICK_BLOCK)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_BRICK_BLOCK_STAIRS = BlockBuilder.create("stone_brick_block_stairs").translation("Stone Brick Block Stairs").configure(STONE_BRICK_BLOCK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("stone_brick_block")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> STONE_BRICK_BLOCK)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_BRICK_BLOCK_WALL = BlockBuilder.create("stone_brick_block_wall").translation("Stone Brick Block Wall").configure(STONE_BRICK_BLOCK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("stone_brick_block")).recipePreset(ABRecipeGenerator.WALL.from(() -> STONE_BRICK_BLOCK)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Diorite bricks
    private static final BlockBuilder.Configurator DIORITE_BRICK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableDioriteBricks).mapColor(DyeColor.LIGHT_GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(1.5f).explosionResistance(6).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> DIORITE_BRICKS = BlockBuilder.create("diorite_bricks").translation("Diorite Bricks").configure(DIORITE_BRICK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> DIORITE_BRICKS_SLAB = BlockBuilder.create("diorite_bricks_slab").translation("Diorite Bricks Slab").configure(DIORITE_BRICK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("diorite_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> DIORITE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> DIORITE_BRICKS_STAIRS = BlockBuilder.create("diorite_bricks_stairs").translation("Diorite Brick Stairs").configure(DIORITE_BRICK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("diorite_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> DIORITE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> DIORITE_BRICKS_WALL = BlockBuilder.create("diorite_bricks_wall").translation("Diorite Brick Wall").configure(DIORITE_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("diorite_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> DIORITE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Polished diorite
    public static final BlockType<BaseBlock> POLISHED_DIORITE_WALL = BlockBuilder.create("polished_diorite_wall").translation("Polished Diorite Wall").configure(DIORITE_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("minecraft", "block/polished_diorite")).recipePreset(ABRecipeGenerator.WALL.from(() -> Items.POLISHED_DIORITE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Andesite bricks
    private static final BlockBuilder.Configurator ANDESITE_BRICK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableAndesiteBricks).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(1.5f).explosionResistance(6).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> ANDESITE_BRICKS = BlockBuilder.create("andesite_bricks").translation("Andesite Bricks").configure(ANDESITE_BRICK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> ANDESITE_BRICKS_SLAB = BlockBuilder.create("andesite_bricks_slab").translation("Andesite Brick Slab").configure(ANDESITE_BRICK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("andesite_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> ANDESITE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> ANDESITE_BRICKS_STAIRS = BlockBuilder.create("andesite_bricks_stairs").translation("Andesite Brick Stairs").configure(ANDESITE_BRICK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("andesite_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> ANDESITE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> ANDESITE_BRICKS_WALL = BlockBuilder.create("andesite_bricks_wall").translation("Andesite Brick Wall").configure(ANDESITE_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("andesite_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> ANDESITE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Polished andesite
    public static final BlockType<BaseBlock> POLISHED_ANDESITE_WALL = BlockBuilder.create("polished_andesite_wall").translation("Polished Andesite Wall").configure(ANDESITE_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("minecraft", "block/polished_andesite")).recipePreset(ABRecipeGenerator.WALL.from(() -> Items.POLISHED_ANDESITE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Granite bricks
    private static final BlockBuilder.Configurator GRANITE_BRICK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableGraniteBricks).mapColor(DyeColor.BROWN).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(1.5f).explosionResistance(6).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> GRANITE_BRICKS = BlockBuilder.create("granite_bricks").translation("Granite Bricks").configure(GRANITE_BRICK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> GRANITE_BRICKS_SLAB = BlockBuilder.create("granite_bricks_slab").translation("Granite Bricks Slab").configure(GRANITE_BRICK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("granite_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> GRANITE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GRANITE_BRICKS_STAIRS = BlockBuilder.create("granite_bricks_stairs").translation("Granite Brick Stairs").configure(GRANITE_BRICK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("granite_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> GRANITE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GRANITE_BRICKS_WALL = BlockBuilder.create("granite_bricks_wall").translation("Granite Brick Wall").configure(GRANITE_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("granite_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> GRANITE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Polished granite
    public static final BlockType<BaseBlock> POLISHED_GRANITE_WALL = BlockBuilder.create("polished_granite_wall").translation("Polished Granite Wall").configure(GRANITE_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("minecraft", "block/polished_granite")).recipePreset(ABRecipeGenerator.WALL.from(() -> Items.POLISHED_GRANITE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Water Stone
    public static final BlockType<BaseBlock> WATER_STONE = BlockBuilder.create("water_stone").translation("Water Stone").material(Material.STONE).configOption(AdditionalBlocksConfig.enableWaterStone).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(0.5f).explosionResistance(0.5f).harvestTool(ToolType.PICKAXE, ToolTier.STONE).buildRegular(COLLECTOR);
    // Bloodstone
    private static final BlockBuilder.Configurator BLOODSTONE_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableBloodstone).mapColor(DyeColor.BLACK).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(3).explosionResistance(8).harvestTool(ToolType.PICKAXE, ToolTier.IRON);
    public static final BlockType<BaseBlock> BLOODSTONE = BlockBuilder.create("bloodstone").translation("Bloodstone Block").configure(BLOODSTONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BLOODSTONE_SLAB = BlockBuilder.create("bloodstone_slab").translation("Bloodstone Slab").configure(BLOODSTONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("bloodstone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BLOODSTONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLOODSTONE_STAIRS = BlockBuilder.create("bloodstone_stairs").translation("Bloodstone Stairs").configure(BLOODSTONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("bloodstone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BLOODSTONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLOODSTONE_WALL = BlockBuilder.create("bloodstone_wall").translation("Bloodstone Wall").configure(BLOODSTONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("bloodstone")).recipePreset(ABRecipeGenerator.WALL.from(() -> BLOODSTONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLOODSTONE = BlockBuilder.create("smooth_bloodstone").translation("Smooth Bloodstone").configure(BLOODSTONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLOODSTONE_SLAB = BlockBuilder.create("smooth_bloodstone_slab").translation("Smooth Bloodstone Slab").configure(BLOODSTONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("smooth_bloodstone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> SMOOTH_BLOODSTONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLOODSTONE_STAIRS = BlockBuilder.create("smooth_bloodstone_stairs").translation("Smooth Bloodstone Stairs").configure(BLOODSTONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("smooth_bloodstone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> SMOOTH_BLOODSTONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLOODSTONE_WALL = BlockBuilder.create("smooth_bloodstone_wall").translation("Smooth Bloodstone Wall").configure(BLOODSTONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("smooth_bloodstone")).recipePreset(ABRecipeGenerator.WALL.from(() -> SMOOTH_BLOODSTONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLOODSTONE_BRICKS = BlockBuilder.create("bloodstone_bricks").translation("Bloodstone Bricks").configure(BLOODSTONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BLOODSTONE_BRICKS_SLAB = BlockBuilder.create("bloodstone_bricks_slab").translation("Bloodstone Brick Slab").configure(BLOODSTONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("bloodstone_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BLOODSTONE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLOODSTONE_BRICKS_STAIRS = BlockBuilder.create("bloodstone_bricks_stairs").translation("Bloodstone Brick Stairs").configure(BLOODSTONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("bloodstone_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BLOODSTONE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLOODSTONE_BRICKS_WALL = BlockBuilder.create("bloodstone_bricks_wall").translation("Bloodstone Brick Wall").configure(BLOODSTONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("bloodstone_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> BLOODSTONE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Black marble
    private static final BlockBuilder.Configurator BLACK_MARBLE_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableBlackMarble).mapColor(DyeColor.BLACK).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(0.8f).explosionResistance(0.8f).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> BLACK_MARBLE = BlockBuilder.create("black_marble").translation("Black Marble Block").configure(BLACK_MARBLE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BLACK_MARBLE_SLAB = BlockBuilder.create("black_marble_slab").translation("Black Marble Slab").configure(BLACK_MARBLE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("black_marble")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BLACK_MARBLE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLACK_MARBLE_STAIRS = BlockBuilder.create("black_marble_stairs").translation("Black Marble Stairs").configure(BLACK_MARBLE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("black_marble")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BLACK_MARBLE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLACK_MARBLE_WALL = BlockBuilder.create("black_marble_wall").translation("Black Marble Wall").configure(BLACK_MARBLE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("black_marble")).recipePreset(ABRecipeGenerator.WALL.from(() -> BLACK_MARBLE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLACK_MARBLE = BlockBuilder.create("smooth_black_marble").translation("Smooth Black Marble").configure(BLACK_MARBLE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLACK_MARBLE_SLAB = BlockBuilder.create("smooth_black_marble_slab").translation("Smooth Black Marble Slab").configure(BLACK_MARBLE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("smooth_black_marble")).recipePreset(ABRecipeGenerator.SLAB.from(() -> SMOOTH_BLACK_MARBLE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLACK_MARBLE_STAIRS = BlockBuilder.create("smooth_black_marble_stairs").translation("Smooth Black Marble Stairs").configure(BLACK_MARBLE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("smooth_black_marble")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> SMOOTH_BLACK_MARBLE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_BLACK_MARBLE_WALL = BlockBuilder.create("smooth_black_marble_wall").translation("Smooth Black Marble Wall").configure(BLACK_MARBLE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("smooth_black_marble")).recipePreset(ABRecipeGenerator.WALL.from(() -> SMOOTH_BLACK_MARBLE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLACK_MARBLE_BRICKS = BlockBuilder.create("black_marble_bricks").translation("Black Marble Bricks").configure(BLACK_MARBLE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BLACK_MARBLE_BRICKS_SLAB = BlockBuilder.create("black_marble_bricks_slab").translation("Black Marble Brick Slab").configure(BLACK_MARBLE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("black_marble_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BLACK_MARBLE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLACK_MARBLE_BRICKS_STAIRS = BlockBuilder.create("black_marble_bricks_stairs").translation("Black Marble Brick Stairs").configure(BLACK_MARBLE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("black_marble_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BLACK_MARBLE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BLACK_MARBLE_BRICKS_WALL = BlockBuilder.create("black_marble_bricks_wall").translation("Black Marble Brick Wall").configure(BLACK_MARBLE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("black_marble_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> BLACK_MARBLE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Mud
    public static final BlockType<BaseBlock> MUD = BlockBuilder.create("mud").translation("Mud Block").material(Material.DIRT).configOption(AdditionalBlocksConfig.enableMud).mapColor(DyeColor.BROWN).sound(SoundType.WET_GRASS).destroyTime(0.5f).explosionResistance(0.5f).harvestTool(ToolType.SHOVEL, ToolTier.STONE).buildRegular(COLLECTOR);
    // Brown bricks
    private static final BlockBuilder.Configurator BROWN_BRICK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableBrownBricks).mapColor(DyeColor.BROWN).requireCorrectToolForDrops().sound(SoundType.NETHER_BRICKS).destroyTime(2).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> BROWN_BRICKS = BlockBuilder.create("brown_bricks").translation("Brown Bricks").configure(BROWN_BRICK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_BRICKS_SLAB = BlockBuilder.create("brown_bricks_slab").translation("Brown Bricks Slab").configure(BROWN_BRICK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("brown_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BROWN_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_BRICKS_STAIRS = BlockBuilder.create("brown_bricks_stairs").translation("Brown Brick Stairs").configure(BROWN_BRICK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("brown_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BROWN_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    // Volcanic stone
    private static final BlockBuilder.Configurator VOLCANIC_STONE_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableVolcanicStone).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.NETHER_BRICKS).destroyTime(2).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> VOLCANIC_STONE = BlockBuilder.create("volcanic_stone").translation("Volcanic Stone").configure(VOLCANIC_STONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> VOLCANIC_STONE_SLAB = BlockBuilder.create("volcanic_stone_slab").translation("Volcanic Stone Slab").configure(VOLCANIC_STONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("volcanic_stone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> VOLCANIC_STONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> VOLCANIC_STONE_STAIRS = BlockBuilder.create("volcanic_stone_stairs").translation("Volcanic Stone Stairs").configure(VOLCANIC_STONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("volcanic_stone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> VOLCANIC_STONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> VOLCANIC_STONE_WALL = BlockBuilder.create("volcanic_stone_wall").translation("Volcanic Stone Slab").configure(VOLCANIC_STONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("volcanic_stone")).recipePreset(ABRecipeGenerator.WALL.from(() -> VOLCANIC_STONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> VOLCANIC_STONE_BRICKS = BlockBuilder.create("volcanic_stone_bricks").translation("Volcanic Stone Bricks").configure(VOLCANIC_STONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> VOLCANIC_STONE_BRICKS_SLAB = BlockBuilder.create("volcanic_stone_bricks_slab").translation("Volcanic Stone Brick Slab").configure(VOLCANIC_STONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("volcanic_stone_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> VOLCANIC_STONE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> VOLCANIC_STONE_BRICKS_STAIRS = BlockBuilder.create("volcanic_stone_bricks_stairs").translation("Volcanic Stone Brick Stairs").configure(VOLCANIC_STONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("volcanic_stone_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> VOLCANIC_STONE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> VOLCANIC_STONE_BRICKS_WALL = BlockBuilder.create("volcanic_stone_bricks_wall").translation("Volcanic Stone Brick Slab").configure(VOLCANIC_STONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("volcanic_stone_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> VOLCANIC_STONE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Stone path + pattern + tiles
    private static final BlockBuilder.Configurator STONE_PATH_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableStonePath).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(2).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> STONE_PATH_STRAIGHT = BlockBuilder.create("stone_path_straight").translation("Straight Stone Path").configure(STONE_PATH_PROPERTIES).configure(HORIZONTAL_ROTATION_PROPERTIES).buildCustom(ABHorizontalRotationBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATH_STRAIGHT_STAIRS = BlockBuilder.create("stone_path_straight_stairs").translation("Straight Stone Path Stairs").configure(STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("stone_path_straight")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> STONE_PATH_STRAIGHT)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATH_STRAIGHT_SLAB = BlockBuilder.create("stone_path_straight_slab").translation("Straight Stone Path Slab").configure(STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("stone_path_straight")).recipePreset(ABRecipeGenerator.SLAB.from(() -> STONE_PATH_STRAIGHT)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATH_CURVED = BlockBuilder.create("stone_path_curved").translation("Curved Stone Path").configure(STONE_PATH_PROPERTIES).configure(HORIZONTAL_ROTATION_PROPERTIES).buildCustom(ABHorizontalRotationBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATH_CURVED_STAIRS = BlockBuilder.create("stone_path_curved_stairs").translation("Curved Stone Path Stairs").configure(STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("stone_path_curved")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> STONE_PATH_CURVED)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATH_CURVED_SLAB = BlockBuilder.create("stone_path_curved_slab").translation("Curved Stone Path Slab").configure(STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("stone_path_curved")).recipePreset(ABRecipeGenerator.SLAB.from(() -> STONE_PATH_CURVED)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATTERN = BlockBuilder.create("stone_pattern").translation("Stone Pattern").configure(STONE_PATH_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATTERN_STAIRS = BlockBuilder.create("stone_pattern_stairs").translation("Stone Patterned Stairs").configure(STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("stone_pattern")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> STONE_PATTERN)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_PATTERN_SLAB = BlockBuilder.create("stone_pattern_slab").translation("Stone Patterned Slab").configure(STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("stone_pattern")).recipePreset(ABRecipeGenerator.SLAB.from(() -> STONE_PATTERN)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_TILES = BlockBuilder.create("stone_tiles").translation("Stone Tiles").material(Material.STONE).configOption(AdditionalBlocksConfig.enableStoneTiles).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.NETHER_BRICKS).destroyTime(2).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> STONE_TILES_STAIRS = BlockBuilder.create("stone_tiles_stairs").translation("Stone Tiled Stairs").configure(STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("stone_tiles")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> STONE_TILES)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> STONE_TILES_SLAB = BlockBuilder.create("stone_tiles_slab").translation("Stone Tiled Slab").configure(STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("stone_tiles")).recipePreset(ABRecipeGenerator.SLAB.from(() -> STONE_TILES)).buildCustom(ABSlabBlock::new, COLLECTOR);
    // Brown stone path + pattern + tiles
    private static final BlockBuilder.Configurator BROWN_STONE_PATH_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableStonePath).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(2).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> BROWN_STONE_PATH_STRAIGHT = BlockBuilder.create("brown_stone_path_straight").translation("Straight Brown Stone Path").configure(BROWN_STONE_PATH_PROPERTIES).configure(HORIZONTAL_ROTATION_PROPERTIES).buildCustom(ABHorizontalRotationBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATH_STRAIGHT_STAIRS = BlockBuilder.create("brown_stone_path_straight_stairs").translation("Straight Brown Stone Path Stairs").configure(BROWN_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("brown_stone_path_straight")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BROWN_STONE_PATH_STRAIGHT)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATH_STRAIGHT_SLAB = BlockBuilder.create("brown_stone_path_straight_slab").translation("Straight Brown Stone Path Slab").configure(BROWN_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("brown_stone_path_straight")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BROWN_STONE_PATH_STRAIGHT)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATH_CURVED = BlockBuilder.create("brown_stone_path_curved").translation("Curved Brown Stone Path").configure(BROWN_STONE_PATH_PROPERTIES).configure(HORIZONTAL_ROTATION_PROPERTIES).buildCustom(ABHorizontalRotationBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATH_CURVED_STAIRS = BlockBuilder.create("brown_stone_path_curved_stairs").translation("Curved Brown Stone Path Stairs").configure(BROWN_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("brown_stone_path_curved")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BROWN_STONE_PATH_CURVED)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATH_CURVED_SLAB = BlockBuilder.create("brown_stone_path_curved_slab").translation("Curved Brown Stone Path Slab").configure(BROWN_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("brown_stone_path_curved")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BROWN_STONE_PATH_CURVED)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATTERN = BlockBuilder.create("brown_stone_pattern").translation("Brown Stone Pattern").configure(BROWN_STONE_PATH_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATTERN_STAIRS = BlockBuilder.create("brown_stone_pattern_stairs").translation("Brown Stone Patterned Stairs").configure(BROWN_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("brown_stone_pattern")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BROWN_STONE_PATTERN)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_PATTERN_SLAB = BlockBuilder.create("brown_stone_pattern_slab").translation("Brown Stone Patterned Slab").configure(BROWN_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("brown_stone_pattern")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BROWN_STONE_PATTERN)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_TILES = BlockBuilder.create("brown_stone_tiles").translation("Brown Stone Tiles").configure(BROWN_STONE_PATH_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_TILES_STAIRS = BlockBuilder.create("brown_stone_tiles_stairs").translation("Brown Stone Tiled Stairs").configure(BROWN_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("brown_stone_tiles")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> BROWN_STONE_TILES)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> BROWN_STONE_TILES_SLAB = BlockBuilder.create("brown_stone_tiles_slab").translation("Brown Stone Tiled Slab").configure(BROWN_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("brown_stone_tiles")).recipePreset(ABRecipeGenerator.SLAB.from(() -> BROWN_STONE_TILES)).buildCustom(ABSlabBlock::new, COLLECTOR);
    // Old stone path + pattern + tiles
    private static final BlockBuilder.Configurator OLD_STONE_PATH_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableStonePath).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(2).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> OLD_STONE_PATH_STRAIGHT = BlockBuilder.create("old_stone_path_straight").translation("Straight Old Stone Path").configure(OLD_STONE_PATH_PROPERTIES).configure(HORIZONTAL_ROTATION_PROPERTIES).buildCustom(ABHorizontalRotationBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATH_STRAIGHT_STAIRS = BlockBuilder.create("old_stone_path_straight_stairs").translation("Straight Old Stone Path Stairs").configure(BROWN_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("old_stone_path_straight")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> OLD_STONE_PATH_STRAIGHT)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATH_STRAIGHT_SLAB = BlockBuilder.create("old_stone_path_straight_slab").translation("Straight Old Stone Path Slab").configure(OLD_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("old_stone_path_straight")).recipePreset(ABRecipeGenerator.SLAB.from(() -> OLD_STONE_PATH_STRAIGHT)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATH_CURVED = BlockBuilder.create("old_stone_path_curved").translation("Curved Old Stone Path").configure(OLD_STONE_PATH_PROPERTIES).configure(HORIZONTAL_ROTATION_PROPERTIES).buildCustom(ABHorizontalRotationBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATH_CURVED_STAIRS = BlockBuilder.create("old_stone_path_curved_stairs").translation("Curved Old Stone Path Stairs").configure(OLD_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("old_stone_path_curved")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> OLD_STONE_PATH_CURVED)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATH_CURVED_SLAB = BlockBuilder.create("old_stone_path_curved_slab").translation("Curved Old Stone Path Slab").configure(OLD_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("old_stone_path_curved")).recipePreset(ABRecipeGenerator.SLAB.from(() -> OLD_STONE_PATH_CURVED)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATTERN = BlockBuilder.create("old_stone_pattern").translation("Old Stone Pattern").configure(OLD_STONE_PATH_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATTERN_STAIRS = BlockBuilder.create("old_stone_pattern_stairs").translation("Old Stone Patterned Stairs").configure(OLD_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("old_stone_pattern")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> OLD_STONE_PATTERN)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_PATTERN_SLAB = BlockBuilder.create("old_stone_pattern_slab").translation("Old Stone Patterned Slab").configure(OLD_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("old_stone_pattern")).recipePreset(ABRecipeGenerator.SLAB.from(() -> OLD_STONE_PATTERN)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_TILES = BlockBuilder.create("old_stone_tiles").translation("Old Stone Tiles").configure(OLD_STONE_PATH_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_TILES_STAIRS = BlockBuilder.create("old_stone_tiles_stairs").translation("Old Stone Tiled Stairs").configure(OLD_STONE_PATH_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("old_stone_tiles")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> OLD_STONE_TILES)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OLD_STONE_TILES_SLAB = BlockBuilder.create("old_stone_tiles_slab").translation("Old Stone Tiled Slab").configure(OLD_STONE_PATH_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("old_stone_tiles")).recipePreset(ABRecipeGenerator.SLAB.from(() -> OLD_STONE_TILES)).buildCustom(ABSlabBlock::new, COLLECTOR);
    // Limestone
    private static final BlockBuilder.Configurator LIMESTONE_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableLimestone).mapColor(DyeColor.YELLOW).requireCorrectToolForDrops().sound(SoundType.NETHER_BRICKS).destroyTime(1.5f).explosionResistance(6).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> LIMESTONE = BlockBuilder.create("limestone").translation("Limestone Block").configure(LIMESTONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> LIMESTONE_STAIRS = BlockBuilder.create("limestone_stairs").translation("Limestone Stairs").configure(LIMESTONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("limestone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> LIMESTONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> LIMESTONE_SLAB = BlockBuilder.create("limestone_slab").translation("Limestone Slab").configure(LIMESTONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("limestone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> LIMESTONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> LIMESTONE_WALL = BlockBuilder.create("limestone_wall").translation("Limestone Wall").configure(LIMESTONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("limestone")).recipePreset(ABRecipeGenerator.WALL.from(() -> LIMESTONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_LIMESTONE = BlockBuilder.create("smooth_limestone").translation("Smooth Limestone").configure(LIMESTONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_LIMESTONE_STAIRS = BlockBuilder.create("smooth_limestone_stairs").translation("Smooth Limestone Stairs").configure(LIMESTONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("smooth_limestone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> SMOOTH_LIMESTONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_LIMESTONE_SLAB = BlockBuilder.create("smooth_limestone_slab").translation("Smooth Limestone Slab").configure(LIMESTONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("smooth_limestone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> SMOOTH_LIMESTONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_LIMESTONE_WALL = BlockBuilder.create("smooth_limestone_wall").translation("Smooth Limestone Wall").configure(LIMESTONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("smooth_limestone")).recipePreset(ABRecipeGenerator.WALL.from(() -> SMOOTH_LIMESTONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> LIMESTONE_BRICKS = BlockBuilder.create("limestone_bricks").translation("Limestone Bricks").configure(LIMESTONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> LIMESTONE_BRICKS_STAIRS = BlockBuilder.create("limestone_bricks_stairs").translation("Limestone Brick Stairs").configure(LIMESTONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("limestone_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> LIMESTONE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> LIMESTONE_BRICKS_SLAB = BlockBuilder.create("limestone_bricks_slab").translation("Limestone Brick Slab").configure(LIMESTONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("limestone_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> LIMESTONE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> LIMESTONE_BRICKS_WALL = BlockBuilder.create("limestone_bricks_wall").translation("Limestone Brick Wall").configure(LIMESTONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("limestone_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> LIMESTONE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Asphalt
    private static final BlockBuilder.Configurator ASPHALT_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableAsphalt).mapColor(DyeColor.BLACK).requireCorrectToolForDrops().sound(SoundType.NETHER_BRICKS).destroyTime(2.5f).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.IRON);
    public static final BlockType<BaseBlock> ASPHALT = BlockBuilder.create("asphalt").translation("Asphalt Block").configure(ASPHALT_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> ASPHALT_STAIRS = BlockBuilder.create("asphalt_stairs").translation("Asphalt Stairs").configure(ASPHALT_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("asphalt")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> ASPHALT)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> ASPHALT_SLAB = BlockBuilder.create("asphalt_slab").translation("Asphalt Slab").configure(ASPHALT_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("asphalt")).recipePreset(ABRecipeGenerator.SLAB.from(() -> ASPHALT)).buildCustom(ABSlabBlock::new, COLLECTOR);
    // Pebbles
    public static final BlockType<BaseBlock> PEBBLES = BlockBuilder.create("pebbles").translation("Pebbles").material(Material.STONE).configOption(AdditionalBlocksConfig.enablePebbles).mapColor(DyeColor.LIGHT_GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(2.5f).explosionResistance(6).harvestTool(ToolType.PICKAXE).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> WATERY_PEBBLES = BlockBuilder.create("watery_pebbles").translation("Watery Pebbles").material(Material.STONE).configOption(AdditionalBlocksConfig.enablePebbles).mapColor(DyeColor.LIGHT_GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(0.5f).explosionResistance(0.5f).harvestTool(ToolType.PICKAXE, ToolTier.STONE).buildRegular(COLLECTOR);
    // Charred blocks
    private static final BlockBuilder.Configurator CHARRED_BLOCK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableCharredBlocks).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(0.8f).explosionResistance(0.8f).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> CHARRED_LOG = BlockBuilder.create("charred_log").translation("Charred Log").configure(CHARRED_BLOCK_PROPERTIES).configure(PILLAR_PROPERTIES).buildCustom(ABPillarBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> CHARRED_WOOD = BlockBuilder.create("charred_wood").translation("Charred Wood").configure(CHARRED_BLOCK_PROPERTIES).modelPreset(ABModelGenerator.CUBE.withTexture("charred_log")).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> CHARRED_PLANKS = BlockBuilder.create("charred_planks").translation("Charred Planks").configure(CHARRED_BLOCK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> CHARRED_STAIRS = BlockBuilder.create("charred_stairs").translation("Charred Stairs").configure(CHARRED_BLOCK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("charred_planks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> CHARRED_PLANKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> CHARRED_SLAB = BlockBuilder.create("charred_slab").translation("Charred Slab").configure(CHARRED_BLOCK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("charred_planks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> CHARRED_PLANKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    // Gray bricks
    private static final BlockBuilder.Configurator GRAY_BRICK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableGrayBricks).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.NETHER_BRICKS).destroyTime(2).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> GRAY_BRICKS = BlockBuilder.create("gray_bricks").translation("Gray Bricks").configure(GRAY_BRICK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> GRAY_BRICKS_STAIRS = BlockBuilder.create("gray_bricks_stairs").translation("Gray Brick Stairs").configure(GRAY_BRICK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("gray_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> GRAY_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GRAY_BRICKS_SLAB = BlockBuilder.create("gray_bricks_slab").translation("Gray Brick Slab").configure(GRAY_BRICK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("gray_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> GRAY_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GRAY_BRICKS_WALL = BlockBuilder.create("gray_bricks_wall").translation("Gray Brick Wall").configure(GRAY_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("gray_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> GRAY_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Smooth glowstone
    private static final BlockBuilder.Configurator SMOOTH_GLOWSTONE_PROPERTIES = builder -> builder.material(Material.GLASS).configOption(AdditionalBlocksConfig.enableSmoothGlowstone).mapColor(DyeColor.YELLOW).requireCorrectToolForDrops().sound(SoundType.GLASS).destroyTime(0.2f).explosionResistance(0.8f).lightLevel(15).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> SMOOTH_GLOWSTONE = BlockBuilder.create("smooth_glowstone").translation("Smooth Glowstone").configure(SMOOTH_GLOWSTONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_GLOWSTONE_STAIRS = BlockBuilder.create("smooth_glowstone_stairs").translation("Smooth Glowstone Stairs").configure(SMOOTH_GLOWSTONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("smooth_glowstone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> SMOOTH_GLOWSTONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_GLOWSTONE_SLAB = BlockBuilder.create("smooth_glowstone_slab").translation("Smooth Glowstone Slab").configure(SMOOTH_GLOWSTONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("smooth_glowstone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> SMOOTH_GLOWSTONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_GLOWSTONE_WALL = BlockBuilder.create("smooth_glowstone_wall").translation("Smooth Glowstone Wall").configure(SMOOTH_GLOWSTONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("smooth_glowstone")).recipePreset(ABRecipeGenerator.WALL.from(() -> SMOOTH_GLOWSTONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Glowstone
    public static final BlockType<BaseBlock> GLOWSTONE_STAIRS = BlockBuilder.create("glowstone_stairs").translation("Glowstone Stairs").configure(SMOOTH_GLOWSTONE_PROPERTIES).configOption(AdditionalBlocksConfig.enableGlowstone).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("minecraft", "block/glowstone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> Items.GLOWSTONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GLOWSTONE_SLAB = BlockBuilder.create("glowstone_slab").translation("Glowstone Slab").configure(SMOOTH_GLOWSTONE_PROPERTIES).configOption(AdditionalBlocksConfig.enableGlowstone).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("minecraft", "block/glowstone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> Items.GLOWSTONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GLOWSTONE_WALL = BlockBuilder.create("glowstone_wall").translation("Glowstone Wall").configure(SMOOTH_GLOWSTONE_PROPERTIES).configOption(AdditionalBlocksConfig.enableGlowstone).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("minecraft", "block/glowstone")).recipePreset(ABRecipeGenerator.WALL.from(() -> Items.GLOWSTONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Glowstone bricks
    private static final BlockBuilder.Configurator GLOWSTONE_BRICK_PROPERTIES = builder -> builder.material(Material.GLASS).configOption(AdditionalBlocksConfig.enableGlowstoneBricks).mapColor(DyeColor.YELLOW).requireCorrectToolForDrops().sound(SoundType.GLASS).destroyTime(0.4f).explosionResistance(0.8f).lightLevel(15).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> GLOWSTONE_BRICKS = BlockBuilder.create("glowstone_bricks").translation("Glowstone Bricks").configure(GLOWSTONE_BRICK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> GLOWSTONE_BRICKS_STAIRS = BlockBuilder.create("glowstone_bricks_stairs").translation("Glowstone Brick Stairs").configure(GLOWSTONE_BRICK_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("glowstone_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> GLOWSTONE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GLOWSTONE_BRICKS_SLAB = BlockBuilder.create("glowstone_bricks_slab").translation("Glowstone Brick Slab").configure(GLOWSTONE_BRICK_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("glowstone_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> GLOWSTONE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> GLOWSTONE_BRICKS_WALL = BlockBuilder.create("glowstone_bricks_wall").translation("Glowstone Brick Wall").configure(GLOWSTONE_BRICK_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("glowstone_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> GLOWSTONE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Smooth stone bricks
    private static final BlockBuilder.Configurator SMOOTH_STONE_BRICKS_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableSmoothStone).mapColor(DyeColor.LIGHT_GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(2.0F).explosionResistance(6.0F).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> SMOOTH_STONE_BRICKS = BlockBuilder.create("smooth_stone_bricks").translation("Smooth Stone Bricks").configure(SMOOTH_STONE_BRICKS_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_STONE_BRICKS_STAIRS = BlockBuilder.create("smooth_stone_bricks_stairs").translation("Smooth Stone Brick Stairs").configure(SMOOTH_STONE_BRICKS_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("smooth_stone_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> SMOOTH_STONE_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_STONE_BRICKS_SLAB = BlockBuilder.create("smooth_stone_bricks_slab").translation("Smooth Stone Brick Slab").configure(SMOOTH_STONE_BRICKS_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("smooth_stone_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> SMOOTH_STONE_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_STONE_BRICKS_WALL = BlockBuilder.create("smooth_stone_bricks_wall").translation("Smooth Stone Brick Wall").configure(SMOOTH_STONE_BRICKS_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("smooth_stone_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> SMOOTH_STONE_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Smooth stone
    public static final BlockType<BaseBlock> SMOOTH_STONE_STAIRS = BlockBuilder.create("smooth_stone_stairs").translation("Smooth Stone Stairs").configure(SMOOTH_STONE_BRICKS_PROPERTIES).configOption(AdditionalBlocksConfig.enableSmoothStone).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("minecraft", "block/smooth_stone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> Items.SMOOTH_STONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_STONE_WALL = BlockBuilder.create("smooth_stone_wall").translation("Smooth Stone Wall").configure(SMOOTH_STONE_BRICKS_PROPERTIES).configOption(AdditionalBlocksConfig.enableSmoothStone).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("minecraft", "block/smooth_stone")).recipePreset(ABRecipeGenerator.WALL.from(() -> Items.SMOOTH_STONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Stone
    public static final BlockType<BaseBlock> STONE_WALL = BlockBuilder.create("stone_wall").translation("Stone Wall").configure(SMOOTH_STONE_BRICKS_PROPERTIES).configOption(AdditionalBlocksConfig.enableSmoothStoneBricks).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("minecraft", "block/stone")).recipePreset(ABRecipeGenerator.WALL.from(() -> Items.STONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Silver
    public static final BlockType<BaseBlock> SILVER_ORE = BlockBuilder.create("silver_ore").translation("Silver Ore").material(Material.STONE).configOption(AdditionalBlocksConfig.enableSilver).destroyTime(3.5f).explosionResistance(3.5f).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.IRON).lootTablePreset(ABLootTableGenerator.orePreset(AdditionalBlocksItems.RAW_SILVER::getItem)).buildCustom(properties -> new ABExperienceBlock(properties, 3), COLLECTOR);
    public static final BlockType<BaseBlock> SILVER_BLOCK = BlockBuilder.create("silver_block").translation("Block of Silver").material(Material.METAL).configOption(AdditionalBlocksConfig.enableSilver).destroyTime(5).explosionResistance(6).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.IRON).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> RAW_SILVER_BLOCK = BlockBuilder.create("raw_silver_block").translation("Block of Raw Silver").material(Material.METAL).configOption(AdditionalBlocksConfig.enableSilver).destroyTime(5).explosionResistance(6).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.IRON).buildRegular(COLLECTOR);
    // Aztec blocks
    private static final BlockBuilder.Configurator AZTEC_BLOCK_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableAztec).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(2.0F).explosionResistance(6.0F).harvestTool(ToolType.PICKAXE, ToolTier.STONE);
    public static final BlockType<BaseBlock> AZTEC_PATTERN = BlockBuilder.create("aztec_pattern").translation("Aztec Pattern").configure(AZTEC_BLOCK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> AZTEC_PATTERNED_WALL = BlockBuilder.create("aztec_patterned_wall").translation("Patterned Aztec Wall").configure(AZTEC_BLOCK_PROPERTIES).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> AZTEC_TILES = BlockBuilder.create("aztec_tiles").translation("Aztec Tiles").configure(AZTEC_BLOCK_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> AZTEC_PILLAR = BlockBuilder.create("aztec_pillar").translation("Aztec Pillar").configure(AZTEC_BLOCK_PROPERTIES).configure(PILLAR_PROPERTIES).buildCustom(ABPillarBlock::new, COLLECTOR);
    // Sunstone
    public static final BlockType<BaseBlock> SUNSTONE = BlockBuilder.create("sunstone").translation("Sunstone").material(Material.STONE).configOption(AdditionalBlocksConfig.enableAztec).mapColor(DyeColor.YELLOW).requireCorrectToolForDrops().sound(SoundType.GILDED_BLACKSTONE).destroyTime(2.0f).explosionResistance(6).harvestTool(ToolType.PICKAXE, ToolTier.STONE).buildRegular(COLLECTOR);
    // Smooth smooth stone
    private static final BlockBuilder.Configurator SMOOTH_SMOOTH_STONE_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableSmoothStone).mapColor(DyeColor.GRAY).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(2.0F).explosionResistance(6.0F).harvestTool(ToolType.PICKAXE);
    public static final BlockType<BaseBlock> SMOOTH_SMOOTH_STONE = BlockBuilder.create("smooth_smooth_stone").translation("Very Smooth Stone").configure(SMOOTH_SMOOTH_STONE_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_SMOOTH_STONE_STAIRS = BlockBuilder.create("smooth_smooth_stone_stairs").translation("Very Smooth Stone Stairs").configure(SMOOTH_SMOOTH_STONE_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("smooth_smooth_stone")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> SMOOTH_SMOOTH_STONE)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_SMOOTH_STONE_SLAB = BlockBuilder.create("smooth_smooth_stone_slab").translation("Very Smooth Stone Slab").configure(SMOOTH_SMOOTH_STONE_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("smooth_smooth_stone")).recipePreset(ABRecipeGenerator.SLAB.from(() -> SMOOTH_SMOOTH_STONE)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> SMOOTH_SMOOTH_STONE_WALL = BlockBuilder.create("smooth_smooth_stone_wall").translation("Very Smooth Stone Wall").configure(SMOOTH_SMOOTH_STONE_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("smooth_smooth_stone")).recipePreset(ABRecipeGenerator.WALL.from(() -> SMOOTH_SMOOTH_STONE)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Bismuth
    public static final BlockType<BaseBlock> BISMUTH_ORE = BlockBuilder.create("bismuth_ore").translation("Bismuth Ore").material(Material.STONE).configOption(AdditionalBlocksConfig.enableBismuth).destroyTime(4.5f).explosionResistance(4.5f).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.DIAMOND).lootTablePreset(ABLootTableGenerator.orePreset(AdditionalBlocksItems.RAW_BISMUTH::getItem)).buildCustom(properties -> new ABExperienceBlock(properties, 3), COLLECTOR);
    public static final BlockType<BaseBlock> BISMUTH_BLOCK = BlockBuilder.create("bismuth_block").translation("Block of Bismuth").material(Material.METAL).configOption(AdditionalBlocksConfig.enableBismuth).destroyTime(6).explosionResistance(7).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.DIAMOND).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> BISMUTH_CLUSTER = BlockBuilder.create("bismuth_cluster").translation("Bismuth Cluster").material(Material.METAL).configOption(AdditionalBlocksConfig.enableBismuth).destroyTime(6).explosionResistance(7).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.DIAMOND).modelPreset(null).buildCustom(BismuthClusterBlock::new, COLLECTOR);
    // Obsidian
    private static final BlockBuilder.Configurator OBSIDIAN_PROPERTIES = builder -> builder.material(Material.STONE).configOption(AdditionalBlocksConfig.enableObsidian).mapColor(DyeColor.BLACK).requireCorrectToolForDrops().sound(SoundType.STONE).destroyTime(50).explosionResistance(1200).harvestTool(ToolType.PICKAXE, ToolTier.DIAMOND);
    public static final BlockType<BaseBlock> OBSIDIAN_STAIRS = BlockBuilder.create("obsidian_stairs").translation("Obsidian Stairs").configure(OBSIDIAN_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("minecraft", "block/obsidian")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> Items.OBSIDIAN)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OBSIDIAN_SLAB = BlockBuilder.create("obsidian_slab").translation("Obsidian Slab").configure(OBSIDIAN_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("minecraft", "block/obsidian")).recipePreset(ABRecipeGenerator.SLAB.from(() -> Items.OBSIDIAN)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OBSIDIAN_WALL = BlockBuilder.create("obsidian_wall").translation("Obsidian Wall").configure(OBSIDIAN_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("minecraft", "block/obsidian")).recipePreset(ABRecipeGenerator.WALL.from(() -> Items.OBSIDIAN)).buildCustom(ABWallBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OBSIDIAN_BRICKS = BlockBuilder.create("obsidian_bricks").translation("Obsidian Bricks").configure(OBSIDIAN_PROPERTIES).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> OBSIDIAN_BRICKS_STAIRS = BlockBuilder.create("obsidian_bricks_stairs").translation("Obsidian Brick Stairs").configure(OBSIDIAN_PROPERTIES).configure(STAIR_PROPERTIES).modelPreset(ABModelGenerator.STAIRS.withTexture("obsidian_bricks")).recipePreset(ABRecipeGenerator.STAIRS.from(() -> OBSIDIAN_BRICKS)).buildCustom(ABStairBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OBSIDIAN_BRICKS_SLAB = BlockBuilder.create("obsidian_bricks_slab").translation("Obsidian Brick Slab").configure(OBSIDIAN_PROPERTIES).configure(SLAB_PROPERTIES).modelPreset(ABModelGenerator.SLAB.withTexture("obsidian_bricks")).recipePreset(ABRecipeGenerator.SLAB.from(() -> OBSIDIAN_BRICKS)).buildCustom(ABSlabBlock::new, COLLECTOR);
    public static final BlockType<BaseBlock> OBSIDIAN_BRICKS_WALL = BlockBuilder.create("obsidian_bricks_wall").translation("Obsidian Brick Wall").configure(OBSIDIAN_PROPERTIES).configure(WALL_PROPERTIES).modelPreset(ABModelGenerator.WALL.withTexture("obsidian_bricks")).recipePreset(ABRecipeGenerator.WALL.from(() -> OBSIDIAN_BRICKS)).buildCustom(ABWallBlock::new, COLLECTOR);
    // Uranium
    public static final BlockType<BaseBlock> URANIUM_ORE = BlockBuilder.create("uranium_ore").translation("Uranium Ore").material(Material.STONE).configOption(AdditionalBlocksConfig.enableUranium).destroyTime(4.0f).explosionResistance(4.0f).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.DIAMOND).lootTablePreset(ABLootTableGenerator.orePreset(AdditionalBlocksItems.RAW_URANIUM::getItem)).buildCustom(properties -> new ABExperienceBlock(properties, 4), COLLECTOR);
    public static final BlockType<BaseBlock> URANIUM_BLOCK = BlockBuilder.create("uranium_block").translation("Block of Uranium").material(Material.METAL).configOption(AdditionalBlocksConfig.enableUranium).destroyTime(6).explosionResistance(6).requireCorrectToolForDrops().sound(SoundType.METAL).harvestTool(ToolType.PICKAXE, ToolTier.DIAMOND).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> URANIUM_GLASS = BlockBuilder.create("uranium_glass").translation("Uranium Glass Block").material(Material.GLASS).configOption(AdditionalBlocksConfig.enableUranium).destroyTime(0.3f).explosionResistance(0.3f).requireCorrectToolForDrops().sound(SoundType.GLASS).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> URANIUM_GLASS_PANE = BlockBuilder.create("uranium_glass_pane").translation("Uranium Glass Pane").material(Material.GLASS).configOption(AdditionalBlocksConfig.enableUranium).destroyTime(0.3f).explosionResistance(0.3f).requireCorrectToolForDrops().sound(SoundType.GLASS).buildRegular(COLLECTOR);
    public static final BlockType<BaseBlock> NUCLEAR_TNT = BlockBuilder.create("nuclear_tnt").translation("Nuclear TNT").material(Material.EXPLOSIVE).configOption(AdditionalBlocksConfig.enableUranium).destroyTime(0.2f).explosionResistance(0.3f).sound(SoundType.GRASS).buildCustom(NuclearTntBlock::new, COLLECTOR);

    public static void init(){
        // Cause the class to be loaded
    }
}
